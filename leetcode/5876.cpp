// 数组美丽值求和

/*
给你一个下标从 0 开始的整数数组 nums 。对于每个下标 i（1 <= i <= nums.length - 2），nums[i] 的 美丽值 等于：

2，对于所有 0 <= j < i 且 i < k <= nums.length - 1 ，满足 nums[j] < nums[i] < nums[k]
1，如果满足 nums[i - 1] < nums[i] < nums[i + 1] ，且不满足前面的条件
0，如果上述条件全部不满足
返回符合 1 <= i <= nums.length - 2 的所有 nums[i] 的 美丽值的总和 。
示例 1：

输入：nums = [1,2,3]
输出：2
解释：对于每个符合范围 1 <= i <= 1 的下标 i :
- nums[1] 的美丽值等于 2


[901,577,484,52,950,985,626,682,698,893,408,194,732,93,967,613,423,828,324,128,267,533,380,532,917,125,335,302,252,141,94,607,738,560,955,94,434,998,158,161,781,958,869,156,417,930,485,591,383,916,549,76,677,805,948,441,342,945,987,69,628,74,470,168,864,423,245,720,561,346,934,437,855,882,882,655,543,509,661,814,800,658,252,934,989,355,820,681,500,773,613,970,974,14,848,281,538,899,215,49,328,715,595,306,548,251,371,51,449,292,84,376,434,669,994,833,736,614,183,158,106,538,220,950,773,241,521,715,606,226,455,310,699,557,756,853,552,353,197,812,589,867,54,179,751,336,572,380,342,643,420,366,622,504,189,601,717,819,799,197,311,987,439,870,354,193,745,933,597,275,935,867,614,219,786,883,544,886,464,573,477,696,226,773,500,651,630,344,618,789,295,926,345,549,600,881,877,371,4,459,809,697,437,326,799,808,25,816,271,211,840,411,823,903,10,529,223,37,506,828,717,188,378,480,393,926,608,784,492,763,576,18,217,255,343,118,897,917,220,938,165,234,731,255,800,317,734,101,545,136,911,887,615,632,39,159,856,787,7,767,470,595,54,643,606,244,362,883,838,371,631,589,904,61,979,690,953,863,261,630,208,828,650,584,859,569,494,853,241,190,345,402,566,824,230,758,699,933,880,747,145,688,167,653,313,232,473,793,272,838,276,238,418,384,222,443,839,752,80,77,957,128,166,946,364,787,401,419,452,172,873,5,468,157,508,911,438,87,427,871,574,184,985,822,304,233,724,722,111,789,92,531,817,247,591,508,280,251,851,994,868,472,947,587,377,329,424,446,223,922,970,909,192,850,784,971,109,467,16,350,297,413,94,508,858,467,149,154,812,315,198,460,206,417,333,950,915,197,256,717,195,854,802,544,265,886,594,444,489,544,724,829,507,694,233,809,133,51,861,974,232,646,260,43,592,395,971,487,371,764,331,234,351,752,468,805,938,620,592,690,564,513,323,349,179,463,752,825,665,925,805,835,406,223,92,957,464,311,941,335,191,484,904,104,529,636,970,8,121,378,991,332,419,342,258,173,555,921,99,184,342,611,781,253,307,844,758,921,290,545,771,390,737,626,591,335,473,830,231,642,107,540,524,859,354,325,865,592,117,745,90,222,343,924,562,285,756,83,648,469,263,302,81,595,682,656,119,189,805,22,640,121,925,666,449,254,471,761,655,690,109,362,872,484,609,515,707,280,71,974,288,896,154,687,334,419,393,885,953,197,481,294,577,432,99,422,414,71,27,695,896,499,290,210,36,773,21,307,905,175,554,857,873,513,343,136,493,364,222,564,258,10,705,589,814,704,575,520,359,339,692,436,403,931,990,436,927,314,445,19,825,888,251,75,952,292,685,620,1,300,659,486,389,507,664,481,119,915,353,866,962,356,585,722,521,229,691,365,120,842,141,658,414,638,364,650,481,45,563,296,85,164,295,517,835,955,766,189,647,130,51,173,677,683,96,214,7,260,548,670,359,46,320,76,102,265,429,817,808,987,352,220,433,958,118,800,163,868,113,44,853,500,870,151,482,932,587,298,401,499,706,108,231,385,358,41,743,727,354,293,695,478,732,1,32,497,101,889,758,183,504,453,828,571,446,902,913,15,255,737,59,84,651,725,505,962,797,651,759,24,917,284,636,484,279,920,249,444,97,254,704,765,250,752,545,634,617,787,800,902,115,199,66,39,544,840,593,639,692,891,290,864,886,125,554,279,739,871,620,569,580,806,18,929,970,16,788,257,616,76,518,233,667,398,670,938]

[6,3,3,9,9]
*/
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    int sumOfBeauties(vector<int>& nums) {
        int n = nums.size();
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0 || i == n-1)
                continue;
            bool isTwo = true;
            for (int j = 0; j < i; j++) {
                for (int k = i + 1; k < n; k++) {
                    if (nums[j] >= nums[i] || nums[k] <= nums[i] || nums[j] >= nums[k])
                        isTwo = false;
                }
            }
            if (isTwo)
                result += 2;
            else if (nums[i] > nums[i-1] && nums[i] < nums[i+1])
                result+=1;
        }
        return result;
    }

    int sumOfBeauties_2(vector<int>& nums) {
        int n = nums.size();
        vector<int> max_nums(n, 0);
        vector<int> min_nums(n, 100001);

        int max_value = nums[0];
        int min_value = nums[n-1];

        for (int i = 0; i < n; i++) {
            if (nums[i] > max_value){
                max_nums[i] = nums[i];
                max_value = nums[i];
            }
                
            if (nums[n-i-1] < min_value){
                min_nums[n-i-1] = nums[n-i-1];
                min_value = nums[n-i-1];
            }
                
        }
        int result = 0;

        for (int i = 1; i < n-1; i++) {
            if(max_nums[i] == min_nums[i])
                result+=2;
            else if (nums[i] > nums[i-1] && nums[i] < nums[i+1])
                result+=1;
        }
        return result;

        
        return result;
    }
    
};

int main() {
    vector<int> nums = {2,2,2};
    Solution solu;

    cout << solu.sumOfBeauties_2(nums)<<endl;

    return 0;
}