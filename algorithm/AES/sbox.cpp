#include <iostream>
#include <cstdio>
using namespace std;


int EEA(int r0, int r1)
{
    int mod = r0;
    int r = 0;
    int t0 = 0;
    int t1 = 1;
    int t = t1;
    int q = 0;
 
    //0不存在乘法逆元
    if (r1 == 0)
    {
        return 0;
    }
 
    while (r1 != 1)
    {
        q = r0 / r1;
 
        r = r0 - q * r1;
 
        t = t0 - q * t1;
 
        r0 = r1;
        r1 = r;
        t0 = t1;
        t1 = t;
    }
 
    //结果为负数
    if (t < 0)
    {
        t = t + mod;
    }
 
    return t;
}

//获取最高位
int GetHighestPosition(unsigned short Number)
{
    int i = 0;
    while (Number)
    {
        i++;
        Number = Number >> 1;
    }
    return i;
}
 
 
//GF(2^8)的多项式除法
unsigned char Division(unsigned short Num_L, unsigned short Num_R, unsigned short *Remainder)
{
    unsigned short r0 = 0;
    unsigned char  q = 0;
    int bitCount = 0;
 
    r0 = Num_L;
 
    bitCount = GetHighestPosition(r0) - GetHighestPosition(Num_R);
    while (bitCount >= 0)
    {
        q = q | (1 << bitCount);
        r0 = r0 ^ (Num_R << bitCount);
        bitCount = GetHighestPosition(r0) - GetHighestPosition(Num_R);
    }
    *Remainder = r0;
    return q;
}
 
 
 
//GF(2^8)多项式乘法
short Multiplication(unsigned char Num_L, unsigned char Num_R)
{
    //定义变量
    unsigned short Result = 0;      //伽罗瓦域内乘法计算的结果
 
    for (int i = 0; i < 8; i++)
    {
        Result ^= ((Num_L >> i) & 0x01) * (Num_R << i);
    }
 
    return Result;
}
 
/// 伽罗瓦域的扩展欧几里得
/// r0 = 1 0001 1011
/// r1 =   1011 0101
int EEA_V2(int r0, int r1)
{
    int mod = r0;
    unsigned short r = 0;
    int t0 = 0;
    int t1 = 1;
    int t = t1;
    int q = 0;
 
    if (r1 == 0)
    {
        return 0;
    }
    
    while (r1 != 1)
    {
        //q = r0 / r1;
        /// 伽罗瓦域除法
        printf ("looping\n");
        printf("r0,r1: %x %x\n",r0, r1);
        q = Division(r0, r1, &r);
        printf("q: %x\n",q);
        /// 加减法变成异或
        r = r0 ^ Multiplication(q, r1);
        printf("m r: %x\n",Multiplication(q, r1));
        printf("r: %x\n",r);
        t = t0 ^ Multiplication(q, t1);
        printf("m t: %x\n",Multiplication(q, t1));
        printf("t: %x\n",t);
        r0 = r1;
        r1 = r;
        t0 = t1;
        t1 = t;
    }
 
    if (t < 0)
    {   
        /// 加减法变异或
        t = t ^ mod;
    }
 
    return t;
}

unsigned char ByteImage(int imput)
{
    unsigned char Result = 0;
 
    for (int i = 0; i < 8; i++)
    {
        Result ^= (((imput >> i) & 1) ^ ((imput >> ((i + 4) % 8)) & 1) ^ ((imput >> ((i + 5) % 8)) & 1) ^ ((imput >> ((i + 6) % 8)) & 1) ^ ((imput >> ((i + 7) % 8)) & 1)) << i;
    }
 
    Result = Result ^ 0x63;
 
    return Result;
}

int main() {
    int r0 = 283;
    int r1 = 0xb5;  //10110101
    int div_r1 = EEA_V2(r0, r1);

    printf("div_r1 %x\n", div_r1);

    int res = ByteImage(div_r1);
    printf("%x\n", res);

    printf("%x\n", res^0xc3);


    return 0;
}

/*
//S盒
const unsigned char S_Table[16][16] =
{
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,

    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};
*/
